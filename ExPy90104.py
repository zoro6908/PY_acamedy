# ExPy9xxxx 파이썬 개인 연습
# pandas
# https://dandyrilla.github.io/2017-08-12/pandas-10min/
# https://pandas.pydata.org/docs/user_guide/basics.html

# 2. 데이터 확인하기 (Viewing Data)

import pandas as pd
import numpy as np

dates = pd.date_range('20130101', periods=6)
df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))
## 첫 5개 행의 데이터를 보여줍니다.
# print(df.head())
#                    A         B         C         D
# 2013-01-01  0.469112 -0.282863 -1.509059 -1.135632
# 2013-01-02  1.212112 -0.173215  0.119209 -1.044236
# 2013-01-03 -0.861849 -2.104569 -0.494929  1.071804
# 2013-01-04  0.721555 -0.706771 -1.039575  0.271860
# 2013-01-05 -0.424972  0.567020  0.276232 -1.087401

## 마지막 3개 행의 데이터를 보여줍니다.
# print(df.tail(3))
#                    A         B         C         D
# 2013-01-04  0.721555 -0.706771 -1.039575  0.271860
# 2013-01-05 -0.424972  0.567020  0.276232 -1.087401
# 2013-01-06 -0.673690  0.113648 -1.478427  0.524988

# print(df.index)
# DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',
#                '2013-01-05', '2013-01-06'],
#               dtype='datetime64[ns]', freq='D')

# print(df.columns)
# # Index(['A', 'B', 'C', 'D'], dtype='object')
#
# print(df.values)
# # [[ 1.34640174  0.38246847 -1.49002392 -0.94267883]
# #  [ 0.28361221  0.05954652 -0.83989696 -0.53682609]
# #  [-0.55978439  1.43538096  1.0384117  -0.47689296]
# #  [-1.2568019   0.11147978 -0.09899503 -0.01896492]
# #  [ 0.1802273  -0.19415575  1.23097264  0.21127325]
# #  [ 0.30918338  0.19747352  0.55395524 -0.60531487]]
#
# # DataFrame 의 간단한 통계 정보를 보여줍니다.
# # 컬럼별로 데이터의 개수(count), 데이터의 평균값(mean), 표준 편차(std), 최솟값(min), 4분위수(25%, 50%, 75%),
# # 그리고 최댓값(max)들의 정보
# print(df.describe())
# #               A         B         C         D
# # count  6.000000  6.000000  6.000000  6.000000
# # mean   0.391790  0.149770  0.032232 -0.024763
# # std    1.719923  1.233743  1.419719  0.822883
# # min   -2.162003 -1.276416 -2.322543 -1.100060
# # 25%   -0.371390 -0.950330 -0.688518 -0.461876
# # 50%    0.237804  0.377042  0.616731 -0.177086
# # 75%    1.610650  0.892316  1.041295  0.459682
# # max    2.543323  1.749664  1.223257  1.190521
#
# ## 열과 행을 바꾼 형태의 데이터프레임입니다.
# # print(df.T)
# #    2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06
# # A    0.432880    0.867556    1.502985    0.831104    0.086349    0.020061
# # B    0.846353    0.274932    1.567630   -0.153296   -0.215974   -0.714269
# # C    0.347435   -1.941517   -1.033182   -0.175999    0.844615    0.340132
# # D    1.333945    1.934783    0.431020   -0.727336    0.115858    0.262895
#
# ## .T는 속성임을 알아두세요. 다음과 같이 메소드로 호출한다면 에러를 냅니다.
# # print(df.T())
# # Traceback (most recent call last):
# #   File "./main.py", line 5, in __main__
# #     dfT = df.T()
# # TypeError: 'DataFrame' object is not callable

# .sort_index() 라는 메소드로 행과 열 이름을 정렬하여 나타낼 수도 있습니다.
# 정렬할 대상 축을 결정할 때에는 axis 를 이용합니다.
# axis=0 라고 써주면 인덱스를 기준으로 정렬하며(기본값), axis=1 라고 써주면 컬럼을 기준으로 정렬합니다.
# 정렬의 방향에 대한 파라미터는 ascending 를 이용합니다. ascending=True 는 오름차순 정렬을 하겠다는 것이고(기본값),
# ascending=False 는 내림차순 정렬을 하겠다는 의미
# print(df.sort_index(axis=1, ascending=False))
# #                    D         C         B         A
# # 2013-01-01  0.978129 -0.006987  0.285066  0.359597
# # 2013-01-02  0.310808  1.012562  2.286719  1.323221
# # 2013-01-03  1.500144  1.654953 -1.325342 -1.245872
# # 2013-01-04 -0.357502 -2.153225 -0.131513 -0.335586
# # 2013-01-05 -1.075278  1.792947  0.413152  0.460547
# # 2013-01-06  0.988164 -0.021158  0.715968  0.788620

# print(df.sort_values(by='B'))
# #                    A         B         C         D
# # 2013-01-06 -1.510401 -0.460648  0.065969  0.411783
# # 2013-01-04  0.300088 -0.355366 -0.320668  0.787267
# # 2013-01-01 -0.647587 -0.342201 -2.306231  0.143624
# # 2013-01-05 -0.304854 -0.217612  0.248077 -0.162961
# # 2013-01-02 -0.605479 -0.141193  0.700901 -0.113749
# # 2013-01-03 -0.590051  0.078224  0.531455  2.516996

