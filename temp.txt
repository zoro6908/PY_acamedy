파이썬 내장 함수를 살펴본다. 활용 빈도가 높고 중요한 함수를 중심으로 알파벳 순서대로 간략히 정리했다.
아래의 파이썬 내장 함수는 외부 모듈과 달리 import가 필요하지 않기 때문에 아무런 설정 없이 바로 사용할 수 있다.

1. abs

abs(x)는 어떤 숫자를 입력받았을 때, 그 숫자의 절댓값을 돌려주는 함수이다.
1
 >>> abs(3)
2
 3
3
 >>> abs(-3)
4
 3
5
 >>> abs(-1.2)
6
 1.2


2. all

all(x)는 반복 가능한(iterable) 자료형 x를 입력 인수로 받으며 이 x가 모두 참이면 True, 거짓이 하나라도 있으면 False를 돌려준다.

※ 반복 가능한 자료형이란 for문으로 그 값을 출력할 수 있는 것을 의미한다. 리스트, 튜플, 문자열, 딕셔너리, 집합 등이 있다.

다음 예를 보자.
1
 >>> all([1, 2, 3])
2
 True



리스트 자료형 [1, 2, 3]은 모든 요소가 참이므로 True를 돌려준다.
1
 >>> all([1, 2, 3, 0])
2
 False



리스트 자료형 [1, 2, 3, 0] 중에서 요소 0은 거짓이므로 False를 돌려준다.

※ 자료형의 참과 거짓에 대해 잘 기억나지 않는다면 02-7을 다시 한 번 읽어 보자.

3. any

any(x)는 x 중 하나라도 참이 있으면 True를 돌려주고, x가 모두 거짓일 때에만 False를 돌려준다. all(x)의 반대이다.

다음 예를 보자.
1
 >>> any([1, 2, 3, 0])
2
 True



리스트 자료형 [1, 2, 3, 0] 중에서 1, 2, 3이 참이므로 True를 돌려준다.
1
 >>> any([0, ""])
2
 False



리스트 자료형 [0, ""]의 요소 0과 ""은 모두 거짓이므로 False를 돌려준다.

4. chr

chr(i)는 아스키(ASCII) 코드 값을 입력받아 그 코드에 해당하는 문자를 출력하는 함수이다.

※ 아스키 코드란 0에서 127 사이의 숫자를 각각 하나의 문자 또는 기호에 대응시켜 놓은 것이다.
1
 >>> chr(97)
2
 'a'
3
 >>> chr(48)
4
 '0'


5. dir

dir은 객체가 자체적으로 가지고 있는 변수나 함수를 보여 준다. 다음 예는 리스트와 딕셔너리 객체 관련 함수(메서드)를 보여 주는 예이다. 우리가 02장에서 살펴본 자료형 관련 함수를 만나 볼 수 있다.
1
 >>> dir([1, 2, 3])
2
 ['append', 'count', 'extend', 'index', 'insert', 'pop',...]
3
 >>> dir({'1':'a'})
4
 ['clear', 'copy', 'get', 'has_key', 'items', 'keys',...]


6. divmod

divmod(a, b)는 2개의 숫자를 입력으로 받는다. 그리고 a를 b로 나눈 몫과 나머지를 튜플 형태로 돌려주는 함수이다.
1
 >>> divmod(7, 3)
2
 (2, 1)


몫을 구하는 연산자 //와 나머지를 구하는 연산자 %를 각각 사용한 결과와 비교해 보자.
1
 >>> 7 // 3
2
 2
3
 >>> 7 % 3
4
 1


7. enumerate

enumerate는 "열거하다"라는 뜻이다. 이 함수는 순서가 있는 자료형(리스트, 튜플, 문자열)을 입력으로 받아 인덱스 값을 포함하는 enumerate 객체를 돌려준다.

※ 보통 enumerate 함수는 다음 예제처럼 for문과 함께 자주 사용한다.

잘 이해되지 않으면 다음 예를 보자.
1
 >>> for i, name in enumerate(['body', 'foo', 'bar']):
2
 ...     print(i, name)
3
 ...
4
 0 body
5
 1 foo
6
 2 bar


순서 값과 함께 body, foo, bar가 순서대로 출력되었다. 즉 위 예제와 같이 enumerate를 for문과 함께 사용하면 자료형의 현재 순서(index)와 그 값을 쉽게 알 수 있다.

for문처럼 반복되는 구간에서 객체가 현재 어느 위치에 있는지 알려 주는 인덱스 값이 필요할때 enumerate 함수를 사용하면 매우 유용하다.

8. eval

eval(expression )은 실행 가능한 문자열(1+2, 'hi' + 'a' 같은 것)을 입력으로 받아 문자열을 실행한 결괏값을 돌려주는 함수이다.
1
 >>> eval('1+2')
2
 3
3
 >>> eval("'hi' + 'a'")
4
 'hia'
5
 >>> eval('divmod(4, 3)')
6
 (1, 1)


보통 eval은 입력받은 문자열로 파이썬 함수나 클래스를 동적으로 실행하고 싶을 때 사용한다.

9. filter

filter란 무엇인가를 걸러낸다는 뜻으로 filter 함수도 동일한 의미를 가진다.

filter 함수는 첫 번째 인수로 함수 이름을, 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 자료형을 받는다. 그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 묶어서(걸러 내서) 돌려준다.

다음 예를 보자.
1
 #positive.py
2
 def positive(l):
3
     result = []
4
     for i in l:
5
         if i > 0:
6
             result.append(i)
7
     return result
8

9
 print(positive([1,-3,2,0,-5,6]))


결과값: [1, 2, 6]

즉 위에서 만든 positive 함수는 리스트를 입력값으로 받아 각각의 요소를 판별해서 양수 값만 돌려주는 함수이다.

filter 함수를 사용하면 위 내용을 다음과 같이 간단하게 작성할 수 있다.
1
 #filter1.py
2
 def positive(x):
3
     return x > 0
4

5
 print(list(filter(positive, [1, -3, 2, 0, -5, 6])))


결과값: [1, 2, 6]

여기에서는 두 번째 인수인 리스트의 요소들이 첫 번째 인수인 positive 함수에 입력되었을때 반환 값이 참인 것만 묶어서 돌려준다. 앞의 예에서는 1, 2, 6만 양수여서 x > 0 문장이 참이되므로 [1, 2, 6]이라는 결괏값을 돌려주게 된 것이다.

앞의 함수는 lambda를 사용하면 더욱 간편하게 코드를 작성할 수 있다.
1
 >>> list(filter(lambda x: x > 0, [1, -3, 2, 0, -5, 6]))
2
 [1, 2, 6]


10. hex

hex(x)는 정수 값을 입력받아 16진수(hexadecimal)로 변환하여 돌려주는 함수이다.
1
 >>> hex(234)
2
 '0xea'
3
 >>> hex(3)
4
 '0x3'

위의 사이트를 보고 내가 자주 사용한 , 혹은 사용할 함수를 정리한 것이다.

abs ( 절댓값 )

abs(x) 는 어떤 숫자를 입력 받았을 때 , 그 숫자의 절댓값을 돌려주는 함수이다.
abs(3) # 3
abs(-3) # 3
abs(-1.2) # 1.2

divmod ( 나누기 )

divmod(a,b) 는 2개의 숫자를 입력으로 받는다.
그리고 a 를 b로 나눈 몫과 나머지를 튜플 형태로 돌려주는 함수이다.
divmod(7,3)
(2,1)

몫을 구하는 연산자 // 와 나머지를 구하는 연산자 % 를 각각 사용한 결과와 비교
print(7 // 3 ) # 2
print(7 % 3 ) # 1

enumerate

enumerate 는 "열거하다" 라는 뜻이다.
이 함수는 순서가 있는 자료형 ( 리스트 , 튜플 , 문자열 ) 을 입력받아 인덱스 값을 포함하는 enumerate 객체를 돌려준다.
for i, name in enumerate(['body', 'foo', 'bar']):
	print( i , name )

 # 0 body
 # 1 foo
 # 2 bar

순서 값과 함께 body , foo , bar 가 순서대로 출력 되었다.
즉 위 예제와 같이 enumerate 를 for 문과 함께 사용하면 자료형의 현재 순서(index) 와 그 값을 쉽게 알 수 있다.

eval

eval(expression) 은 실행 가능한 문자열 (1+2 , 'hi' + 'a' 같은것 ) 을 입력으로 받아 문자열을 실행한 결괏값을돌려주는 함수이다.
print( eval('1+2') ) # 3
print( eval(" 'hi' + 'a' " ) # 'hia'
print( eval(' divmod(4,3) ' ) # ( 1 , 1 )

filter

filter 란 무엇인가를 걸러낸다는 뜻이다.
filter 함수도 동일한 의미를 가진다.

filter 함수는 첫 번째 인수로 함수 이름을 , 두 번째 인수로 그 함수에 차례로 들어갈 반복 가능한 자료형을 받는다.
그리고 두 번째 인수인 반복 가능한 자료형 요소가 첫 번째 인수인 함수에 입력되었을 때 반환 값이 참인 것만 묶어서(걸러 내서) 돌려준다.
def positive( num_list ) :
		result = []
        for i in num_list:
        	if i > 0 :
             	result.append(i)
        return result
print(positive([ 1,-3,2,0,-5,6 ] ))
## [ 1 , 2 , 6 ]

즉 위에서 만든 positive 함수는 리스트를 입력값으로 받아 각각의 요소를 판별해서 양수 값만 돌려주는 함수이다.

filter 함수를 사용하면 위 내용을 다음과 같이 간단하게 작성할 수 있다.
def positive(x):
	return x > 0

print(list(filter(positive , [1,-3,2,0,-5,6])))
# [ 1 , 2 , 6 ]

여기에서는 두 번째 인수인 리스트의 요소들이 첫 번째 인수인 positive 함수에 입력되었을 때 반환 값이 참인 것만 묶어서 돌려준다.

앞의 예에서는 1 , 2 , 6 만 양수여서 x > 0 문장이 참이되므로
[ 1 , 2 , 6 ]이라는 결과값을 돌려주게 된다.

앞의 함수는 lambda 를 사용하면 더욱 간편하게 작성 할 수 있다.
list(filter(lambda x : x > 0 , [1 , -3 , 2 , 0 , -5 , 6]))
# [ 1 , 2 , 6 ]

map

map( f , iterable ) 은 함수 ( f ) 와 반복 가능한( iterable ) 자료형을 입력으로 받는다.

map 은 입력받은 자료형의 각 요소를 함수 f 가 수행한 결과를 묶어서 돌려주는 함수이다.
def two_times(numberList):
	result = [ ]
    for number in numberList:
    	result.append(number * 2)
    return result

result = two_times([1 , 2 , 3 , 4])
print(result) # [ 2 , 4 , 6 , 8]

위 예제는 map 함수를 사용하면 다음처럼 바꿀 수 있다.
def two_times(x):
	return x * 2

print(map(two_times , [1 , 2 , 3 , 4])))
# [2 ,4 , 6 , 8]

리스트의 첫번째 요소인 1 이 two_times 함수의 입력값으로 들어가고
1  2 의 과정을 거쳐서 2가 된다.
다음으로 리스트의 두번째 요소인 2 가 2  2 의 과정을 거쳐 4 가 된다.

따라서 결과값 리스트는 이제 [ 2 , 4 ] 가 된다.
총 4개의 요소값이 모두 수행되면 마지막으로 [2 ,4 ,6 ,8 ] 을 돌려줌
print(list(map(lambda a: a*2 , [1 , 2 , 3 , 4]))
# [ 2 , 4 , 6 , 8 ]

max ( 최대값 )

max( iterable ) 는 인수로 반복 가능한 자료형을 입력받아 그 최댓값을 돌려주는 함수이다.
print( max([1 , 2 , 3 ]) ) # 3
print( max("python") ) # 'y'

min ( 최소값 )

min( iterable ) 은 max 함수와 반대로 , 인수로 반복 가능한 자료형을 입력받아 그 최소값을 돌려주는 함수이다.
print(min([1 , 2 , 3]) # 1
print(min("python")) # 'h'

pow ( 제곱 )

pow(x,y) 는 x 의 y 제곱한 결과값을 돌려주는 함수이다.
print(pow(2,4)) # 16
print(pow(3,3)) # 27


round ( 반올림 )

round(number[, ndigits]) 함수는 숫자를 입력받아 반올림해 주는 함수이다.
print(round(4.6)) # 5
print(round(4.2)) # 4

소수점 2 자리까지만 반올림하여 표시 할 수 있다.


zip ( 동일한 개수로 묶어줌 )
print(list(zip([1,2,3] , [4,5,6]))
# [ (1,4) , (2,5) , (3,6) ]

print(list(zip([1,2,3] , [4,5,6] , [7,8,9] ))
#[ (1,4,7) , (2,5,8) , (3,6,9) ]

print(list(zip("abc" , "def" ))
#[ ('a' , 'd') , ('b' , 'e') , ('c' , 'f') ]

